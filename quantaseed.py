#!/usr/bin/env python3
import argparse
import requests
import sys
import string
import os
import time
import pyperclip
import math
from collections import Counter
from pathlib import Path

# V√©rification et installation automatique des modules
REQUIRED_MODULES = ["requests", "pyperclip", "colorama"]

for module in REQUIRED_MODULES:
    try:
        __import__(module)
    except ImportError:
        print(f"‚ö†Ô∏è Le module '{module}' n'est pas install√©.")
        print(f"üí° Ex√©cutez : pip install {module}\n")
        sys.exit(1)

# Importation apr√®s v√©rification
import colorama
from colorama import Fore, Style

# Initialisation des couleurs pour Windows
colorama.init(autoreset=True)

LOCKFILE = Path("last_execution_length.lock")
TIME_LIMIT = 90  # 90 secondes avant de pouvoir ex√©cuter √† nouveau --length
MAX_LENGTH = 1024  # D√©finir une longueur maximale raisonnable

# API QUANTIQUE UNIQUE UTILIS√âE
ANU_QRNG_API = "https://qrng.anu.edu.au/API/jsonI.php?length={}&type=uint8"

def check_last_execution():
    """ V√©rifie si le script a √©t√© ex√©cut√© avec `-l` ou `--length` dans les 90 derni√®res secondes. """
    if LOCKFILE.exists():
        try:
            last_run = float(LOCKFILE.read_text().strip())
            elapsed_time = time.time() - last_run
            if elapsed_time < TIME_LIMIT:
                remaining_time = TIME_LIMIT - elapsed_time
                print(Fore.RED + f"\n‚è≥ Veuillez patienter {int(remaining_time)} secondes avant de relancer --length.\n")
                sys.exit(1)
        except ValueError:
            pass  

def fetch_quantum_random_numbers(n: int):
    """ R√©cup√®re des nombres al√©atoires depuis l'API ANU QRNG. """
    try:
        print(Fore.CYAN + f"\nüîÑ Tentative avec ANU QRNG (length={n})...\n")
        response = requests.get(ANU_QRNG_API.format(n), timeout=5)
        response.raise_for_status()
        data = response.json()
        return data["data"]
    except requests.exceptions.RequestException as e:
        print(Fore.RED + f"\n‚ùå Erreur : Impossible d'obtenir l'entropie quantique ({e})")
        sys.exit(1)

def generate_quantum_entropy_string(length: int) -> str:
    """ Convertit les octets quantiques en une cha√Æne s√©curis√©e. """
    ALPHABET = string.ascii_letters + string.digits + "+/"
    random_numbers = fetch_quantum_random_numbers(length)
    return ''.join(ALPHABET[b % len(ALPHABET)] for b in random_numbers)

def calculate_entropy(data):
    """ Calcule l'entropie de Shannon d'une cha√Æne de caract√®res. """
    if not data:
        return 0

    frequency = Counter(data)
    length = len(data)

    entropy = -sum((freq / length) * math.log2(freq / length) for freq in frequency.values())
    return entropy

def validate_length(value):
    """ V√©rifie si la longueur est bien un entier positif et dans la limite autoris√©e. """
    try:
        ivalue = int(value)
        if ivalue < 1 or ivalue > MAX_LENGTH:
            raise argparse.ArgumentTypeError(f"‚ùå --length doit √™tre entre 1 et {MAX_LENGTH}.")
        return ivalue
    except ValueError:
        raise argparse.ArgumentTypeError("‚ùå --length doit √™tre un nombre entier valide.")

def main():
    parser = argparse.ArgumentParser(description="QuantaSeed - G√©n√©rateur d'entropie quantique")
    parser.add_argument("-l", "--length", type=validate_length, default=1024, help=f"üîí Sp√©cifie la longueur de la cha√Æne (1-{MAX_LENGTH}, d√©faut : 1024)")
    parser.add_argument("-s", "--silent", action="store_true", help="üîï Mode silencieux (affiche uniquement la cha√Æne g√©n√©r√©e)")
    parser.add_argument("-c", "--copy", action="store_true", help="üìã Copie la cha√Æne g√©n√©r√©e dans le presse-papier")
    parser.add_argument("--entropy-metric", action="store_true", help="üìä √âvalue la force de l'entropie")
    parser.add_argument("-a", "--show-api", action="store_true", help="üì° Affiche l'API quantique utilis√©e et quitte")
    parser.add_argument("--aide", action="store_true", help="üá´üá∑ Affiche l'aide en fran√ßais")

    args = parser.parse_args()

    if args.aide:
        print(Fore.GREEN + "üî¨ QuantaSeed - G√©n√©rateur d'entropie quantique")
        print(Fore.YELLOW + "üìå Utilisation :")
        print(Fore.CYAN + "   python quantaseed.py --length 1024")
        print(Fore.YELLOW + "\nüìå Options disponibles :")
        print(Fore.LIGHTMAGENTA_EX + "   -l, --length <nombre>  " + Fore.WHITE + "  Sp√©cifie la longueur de la cha√Æne (par d√©faut : 1024)")
        print(Fore.LIGHTMAGENTA_EX + "   -s, --silent           " + Fore.WHITE + "  Mode silencieux (affiche uniquement la cha√Æne)")
        print(Fore.LIGHTMAGENTA_EX + "   -c, --copy             " + Fore.WHITE + "  Copie la cha√Æne g√©n√©r√©e dans le presse-papier")
        print(Fore.LIGHTMAGENTA_EX + "   --entropy-metric       " + Fore.WHITE + "  Affiche l'entropie de Shannon de la cha√Æne g√©n√©r√©e")
        print(Fore.LIGHTMAGENTA_EX + "   -a, --show-api         " + Fore.WHITE + "  Affiche l'API quantique utilis√©e et quitte")
        print(Fore.LIGHTMAGENTA_EX + "   --aide                 " + Fore.WHITE + "  Affiche cette aide en fran√ßais")
        sys.exit(0)

    if args.show_api:
        print(Fore.LIGHTBLUE_EX + "\nüì° API d'entropie quantique utilis√©e :")
        print(Fore.YELLOW + f"üîπ ANU QRNG: {ANU_QRNG_API.format('<length>')}\n")
        sys.exit(0)

    if args.length:
        check_last_execution()
        LOCKFILE.write_text(str(time.time()))

    random_string = generate_quantum_entropy_string(args.length)

    if args.copy:
        pyperclip.copy(random_string)
        print(Fore.GREEN + "\nüìã Cha√Æne copi√©e dans le presse-papier !\n")

    if not args.silent:
        print(Fore.CYAN + f"\nüîë Cha√Æne g√©n√©r√©e : {random_string}\n")

    if args.entropy_metric:
        entropy_value = calculate_entropy(random_string)
        print(Fore.YELLOW + f"\nüìä Entropie de Shannon : {entropy_value:.4f} bits par caract√®re\n")

if __name__ == "__main__":
    main()
